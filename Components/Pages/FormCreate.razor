@page "/Form/{HashId}"
@rendermode InteractiveServer
@inject LinkService LinkService
@inject ApplicationDbContext _db
@inject AuthenticationStateProvider AuthenticationStateProvider


@if (userAuthorized)
{
    <ControlForm templateForm="templateForm" newForm="newForm" isAuthenticated="isAuthenticated" />
}
else
{
    <center>
        <h2>You are not authorized to see this form</h2>
    </center>
}


@code {
    [Parameter] public string? HashId { get; set; }
    public Template? templateForm { get; set; } = new();
    public forms.Models.Form newForm { get; set; } = new();
    public bool isAuthenticated { get; set; } = false;
    private bool userAuthorized { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var templateId = LinkService.DecryptId(HashId!);

        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;
        isAuthenticated = user.Identity is { IsAuthenticated: true };

        templateForm = await _db.Templates.Include(t => t.Comments).ThenInclude(c =>
        c.User).Include(t => t.Likes).Include(t => t.Topic).Include(t => t.Tags).Include(t =>
        t.Questions).ThenInclude(q =>
        q.Options).AsSplitQuery().FirstOrDefaultAsync(t => t.Id == templateId);

        if (templateForm == null)
        {
            return;
        }
        else if (templateForm.IsPublic)
        {
            userAuthorized = true;
        }
        else if (!templateForm.IsPublic && isAuthenticated)
        {
            var userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            userAuthorized = await _db.Templates.Where(t => t.Id == templateForm.Id).SelectMany(t => t.AllowedUsers).AnyAsync(u =>
            u.Id == userId);
        }
        Console.WriteLine($"Current user is Authorized : {userAuthorized}");

        newForm.TemplateId = templateId;
        newForm.Responses = templateForm?.Questions.Select(q => new Response
        {
            QuestionId = q.Id,
            Answer = string.Empty
        }).ToList()!;

        await base.OnInitializedAsync();
    }
}