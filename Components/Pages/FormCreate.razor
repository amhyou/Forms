@page "/Form/{HashId}"
@rendermode InteractiveServer
@inject LinkService LinkService
@inject ApplicationDbContext _db
@inject AuthenticationStateProvider AuthenticationStateProvider


<ControlForm templateForm="templateForm" newForm="newForm" isAuthenticated="isAuthenticated" />

@code {
    [Parameter] public string? HashId { get; set; }
    public Template templateForm { get; set; } = new();
    public forms.Models.Form newForm { get; set; } = new();
    public bool isAuthenticated { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var templateId = LinkService.DecryptId(HashId!);

        templateForm = await _db.Templates.Include(t => t.Comments).ThenInclude(c =>
        c.User).Include(t => t.Likes).Include(t => t.Topic).Include(t => t.Tags).Include(t =>
        t.Questions).ThenInclude(q =>
        q.Options).AsSplitQuery().FirstAsync(t => t.Id == templateId);

        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;
        isAuthenticated = user.Identity is { IsAuthenticated: true };

        var userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

        newForm.TemplateId = templateId;
        newForm.AuthorId = userId;
        newForm.Responses = templateForm?.Questions.Select(q => new Response
        {
            QuestionId = q.Id,
            Answer = string.Empty
        }).ToList()!;

        await base.OnInitializedAsync();
    }
}