@page "/MySpace"
@rendermode InteractiveServer
@inject ApplicationDbContext _db
@inject LinkService LinkService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="template-list-wrapper">
    <AuthorizeView>
        <Authorized>
            <a href="/CreateTemplate" class="card-link">
                <div class="template-card create-card">
                    <div class="create-content">
                        <i class="fas fa-plus plus-icon">New</i>
                    </div>
                </div>
            </a>
            @foreach (var template in templateList)
            {
                @* <a href="/EditTemplate/@(LinkService.EncryptId(template.Id))" class="card-link">
                    
                </a> *@
                <TemplateCard mySpace="true" Item="template" />
            }
        </Authorized>
        <NotAuthorized>
            <center>
                <h2>Need to <a href="/Account/Login">login</a> first</h2>
            </center>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private List<Template> templateList = new();


    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;
        var isAuthenticated = user.Identity is { IsAuthenticated: true };
        if (isAuthenticated)
        {
            var userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            templateList = await _db.Templates.Where(t => t.CreatorId == userId).OrderByDescending(e => e.CreatedAt).ToListAsync();
        }
        else
        {
            templateList = await _db.Templates.OrderByDescending(e => e.CreatedAt).ToListAsync();
        }

        await base.OnInitializedAsync();
    }
}
