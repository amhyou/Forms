@page "/EditForm/{HashId}"
@rendermode InteractiveServer
@inject LinkService LinkService
@inject ApplicationDbContext _db
@inject AuthenticationStateProvider AuthenticationStateProvider

<ControlForm templateForm="templateForm" newForm="filledForm" isAuthenticated="isAuthenticated" />

@code {
    [Parameter] public string? HashId { get; set; }

    public bool isAuthenticated { get; set; } = false;
    public Template templateForm { get; set; } = new();
    public forms.Models.Form filledForm { get; set; } = new();

    private bool userAuthorized { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var formId = LinkService.DecryptId(HashId!);

        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;
        isAuthenticated = user.Identity is { IsAuthenticated: true };

        if (!isAuthenticated)
        {
            return;
        }
        var userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

        filledForm = await _db.Forms.Include(f => f.Responses).FirstAsync(f => f.Id == formId);
        templateForm = await _db.Templates.Include(t => t.Comments).ThenInclude(c =>
        c.User).Include(t => t.Likes).Include(t => t.Topic).Include(t => t.Tags).Include(t =>
        t.Questions).ThenInclude(q =>
        q.Options).AsSplitQuery().FirstAsync(t => t.Id == filledForm.TemplateId);


        if (userId == filledForm.AuthorId || userId == templateForm.CreatorId)
        {
            userAuthorized = true;
        }
        else if (templateForm != null && templateForm.IsPublic)
        {
            userAuthorized = true;
        }
        else if (templateForm != null && !templateForm.IsPublic)
        {
            userAuthorized = await _db.Templates.Where(t => t.Id == templateForm.Id).SelectMany(t => t.AllowedUsers).AnyAsync(u =>
            u.Id == userId);
        }
        Console.WriteLine($"Current user is Authorized : {userAuthorized}");

        await base.OnInitializedAsync();
    }
}