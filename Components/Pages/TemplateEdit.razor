@page "/EditTemplate/{HashId}"
@rendermode InteractiveServer
@inject ApplicationDbContext _db
@inject LinkService LinkService
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>
        @if (userAuthorized)
        {
            <ControlTemplate newTemplate="newTemplate" />
        }
    </Authorized>
    <NotAuthorized>
        <h1>Need to authentify first</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public string? HashId { get; set; }


    public Template newTemplate = new();

    private bool userAuthorized = false;


    protected override async Task OnInitializedAsync()
    {
        var templateId = LinkService.DecryptId(HashId!);

        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;
        var isAuthenticated = user.Identity is { IsAuthenticated: true };

        if (!isAuthenticated)
        {
            return;
        }
        var userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

        newTemplate = await _db.Templates.Include(t => t.Topic).Include(t => t.Tags).Include(t => t.Questions).ThenInclude(q =>
        q.Options).Include(t => t.AllowedUsers).FirstAsync(t => t.Id == templateId);


        if (userId == newTemplate.CreatorId)
        {
            userAuthorized = true;
        }
        Console.WriteLine($"Current user is Authorized : {userAuthorized}");

        await base.OnInitializedAsync();
    }
}