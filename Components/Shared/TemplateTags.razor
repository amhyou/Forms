@inject RedisService RedisService
@using NRedisStack.Search
@using StackExchange.Redis
@inject IJSRuntime JS
@inject ApplicationDbContext _db

<div class="mb-3">
    <label class="form-label">Tags</label>
    <div class="border rounded p-1 d-flex flex-wrap">
        @foreach (var tag in newTemplate.Tags)
        {
            <div class="badge bg-primary me-1 mb-1">
                @tag.Name
                <button type="button" class="btn-close btn-close-white ms-1" aria-label="Close"
                    @onclick="@(() => newTemplate.Tags.Remove(tag))"></button>
            </div>
        }
        <input @ref="inputElement" @oninput="@HandleTagInput" class="form-control border-0 flex-grow-1"
            placeholder="Enter tags" />
        @if (suggestions.Any())
        {
            <ul class="suggestions-list">
                @foreach (var suggestion in suggestions)
                {
                    <li @onclick="() => AddTag(suggestion)">@suggestion.Name</li>
                }
            </ul>
        }
    </div>
</div>


@code {
    [Parameter] public Template newTemplate { get; set; } = new();

    private ElementReference inputElement;

    private List<Tag> suggestions = new();

    private async Task HandleTagInput(ChangeEventArgs e)
    {
        string inputValue = e.Value?.ToString() ?? string.Empty;

        if (string.IsNullOrWhiteSpace(inputValue))
        {
            suggestions.Clear();
        }
        else if (inputValue.EndsWith(" "))
        {
            string tag = inputValue.Trim();

            var ft = RedisService.GetSearch();
            var tags = ft.Search("idx_tags", new Query($"@Name:{{*{tag}*}}"));
            var existingTag = tags.Documents.Select(d => new Tag { Name = d["Name"].ToString(), Id = int.Parse(d["Id"]!) }
            ).FirstOrDefault();

            if (existingTag != null)
            {
                await AddTag(existingTag);
            }
            else
            {
                await AddNewTag(tag);
            }
        }
        else
        {
            var ft = RedisService.GetSearch();
            var tags = ft.Search("idx_tags", new Query($"@Name:{{*{inputValue}*}}"));
            suggestions = tags.Documents.Select(d => new Tag { Name = d["Name"].ToString(), Id = int.Parse(d["Id"]!) }
            ).ToList();
        }
    }

    private async Task AddTag(Tag tag)
    {
        Console.WriteLine("adding existing tag ...");
        if (!newTemplate.Tags.Any(t => t.Name == tag.Name))
        {
            newTemplate.Tags.Add(tag);
        }
        await JS.InvokeVoidAsync("clearInputField", inputElement);
        await InvokeAsync(StateHasChanged);
        suggestions.Clear();
    }

    private async Task AddNewTag(string tag)
    {
        Console.WriteLine("adding new tag ...");
        try
        {

            Tag newTag = new Tag { Name = tag };
            _db.Tags.Add(newTag);
            await _db.SaveChangesAsync();
            newTemplate.Tags.Add(newTag);
            var _dbRedis = RedisService.GetDatabase();
            await _dbRedis.HashSetAsync($"tag:{newTag.Id}", new HashEntry[] { new("Id", newTag.Id), new("Name", newTag.Name) });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"error when creating tag: {ex.Message}");
        }

        await JS.InvokeVoidAsync("clearInputField", inputElement);
        await InvokeAsync(StateHasChanged);
        suggestions.Clear();
    }
}