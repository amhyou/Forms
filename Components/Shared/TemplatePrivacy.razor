@inject ApplicationDbContext _db
@using Microsoft.EntityFrameworkCore

<div class="mb-3">
    <label class="form-label">Quiz Visibility</label>
    <div class="form-check form-switch"> @* Use form-switch for a nicer switch *@
        <InputCheckbox @bind-Value="newTemplate.IsPublic" class="form-check-input" id="isPublicSwitch" />
        <label class="form-check-label" for="isPublicSwitch">@(newTemplate.IsPublic ? "Public" : "Restricted")</label>
    </div>
</div>

@if (!newTemplate.IsPublic)
{
    <div class="mb-3">
        <label class="form-label">Allowed Users</label>
        <InputText @oninput="HandleUserInput" @bind-Value="userInput" class="form-control" placeholder="Enter username" />

        @if (Suggestions.Any()) // Show suggestions if available
        {
            <ul class="list-group mt-2">
                @foreach (var suggestion in Suggestions)
                {
                    <li class="list-group-item list-group-item-action" @onclick="@(() => AddUser(suggestion))">
                        @suggestion
                    </li>
                }
            </ul>
        }

        @if (newTemplate.AllowedUsers.Any()) // Display added users as a list
        {
            <ul class="list-group mt-2">
                @foreach (var user in newTemplate.AllowedUsers)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @user
                        <button type="button" class="btn-close btn-close-white" @onclick="@(() => RemoveUser(user))"></button>
                    </li>
                }
            </ul>
        }

    </div>
}
@code {
    [Parameter]
    public Template newTemplate { get; set; } = new();

    private List<ApplicationUser> Suggestions = new();
    private List<ApplicationUser> AllUsers = new();

    private string userInput = "";

    protected override async Task OnInitializedAsync()
    {
        AllUsers = await _db.Users.ToListAsync();
        await base.OnInitializedAsync();
    }


    private void RemoveUser(ApplicationUser userToRemove)
    {
        newTemplate.AllowedUsers.Remove(userToRemove);
    }

    private void HandleUserInput(ChangeEventArgs e)
    {
        string? inputValue = e.Value?.ToString();
        userInput = inputValue ?? "";

        if (!string.IsNullOrWhiteSpace(inputValue))
        {
            Suggestions = AllUsers.Where(u => u.UserName!.Contains(inputValue, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            Suggestions.Clear();
        }
    }

    private void AddUser(ApplicationUser user)
    {
        if (!newTemplate.AllowedUsers.Contains(user))
        {
            newTemplate.AllowedUsers.Add(user);
            userInput = ""; // Clear input field
            Suggestions.Clear(); // Clear suggestions
        }
    }
}