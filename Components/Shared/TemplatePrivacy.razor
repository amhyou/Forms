@inject RedisService RedisService
@using NRedisStack.Search
@inject IJSRuntime JS
@inject ApplicationDbContext _db

<div class="mb-3">
    <div class="form-check form-switch">
        <InputCheckbox @bind-Value="newTemplate.IsPublic" class="form-check-input" id="isPublicSwitch" />
        <label class="form-check-label" for="isPublicSwitch">Visibility: @(newTemplate.IsPublic ? "Public" :
                        "Restricted")
        </label>
    </div>
</div>

@if (!newTemplate.IsPublic)
{
    <div class="mb-3">
        <label class="form-label">Allowed Users</label>
        <input @ref="@inputElement" @oninput="@HandleUserInput" class="form-control" placeholder="Enter Email" />

        @if (suggestions.Any())
        {
            <ul class="suggestions-list">
                @foreach (var suggestion in suggestions)
                {
                    <li @onclick="() => AddUser(suggestion)">@suggestion.Email</li>
                }
            </ul>
        }

        @if (newTemplate.AllowedUsers.Any())
        {
            <ul class="list-group mt-2">
                @foreach (var user in newTemplate.AllowedUsers)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @user.Email
                        <button type="button" class="btn-close btn-close-white" @onclick="@(() => RemoveUser(user.Id))"></button>
                    </li>
                }
            </ul>
        }

    </div>
}
@code {
    [Parameter] public Template newTemplate { get; set; } = new();

    private List<SuggestedUser> suggestions = new();

    private ElementReference inputElement;

    class SuggestedUser
    {
        public string? Id;
        public string? Email;
    }

    private void RemoveUser(string userId)
    {
        Console.WriteLine("removing user from allowed users ...");
        newTemplate.AllowedUsers.RemoveAll(u => u.Id == userId);
    }

    private void HandleUserInput(ChangeEventArgs e)
    {
        string inputValue = e.Value?.ToString() ?? string.Empty;

        if (string.IsNullOrWhiteSpace(inputValue))
        {
            suggestions.Clear();
        }
        else
        {
            var ft = RedisService.GetSearch();
            var users = ft.Search("idx_users", new Query($"{inputValue}*"));
            suggestions = users.Documents.Select(d => new SuggestedUser
            {
                Email = d["Email"].ToString(),
                Id = d["Id"].ToString()
            }).ToList();
            Console.WriteLine(suggestions.FirstOrDefault()?.Email);
        }
    }

    private async Task AddUser(SuggestedUser sUser)
    {
        Console.WriteLine("adding user to allowed users ...");
        if (!newTemplate.AllowedUsers.Any(u => u.Id == sUser.Id))
        {
            var user = await _db.Users.FirstOrDefaultAsync(u => u.Id == sUser.Id);
            if (user != null)
            {
                newTemplate.AllowedUsers.Add(user);
            }
            else
            {
                Console.WriteLine("user not found in database");
            }
        }
        await JS.InvokeVoidAsync("clearInputField", inputElement);
        await InvokeAsync(StateHasChanged);
        suggestions.Clear();
    }
}