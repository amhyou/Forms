<div class="question mb-3 p-3 border rounded position-relative">
    <label class="form-label">Question</label>
    <input @bind-value="newQuestion!.Text" type="text" class="form-control mb-2" placeholder="Enter question text">

    <label class="form-label">Answer Type</label>
    <select class="form-select mb-2 answerType" @onchange="HandleAnswerTypeChange">
        <option value="@QuestionType.ShortAnswer" selected="@(newQuestion.Type == QuestionType.ShortAnswer)">Short
            Answer</option>
        <option value="@QuestionType.Paragraph" selected="@(newQuestion.Type == QuestionType.Paragraph)">Paragraph
        </option>
        <option value="@QuestionType.Integer" selected="@(newQuestion.Type == QuestionType.Integer)">Positive Integer
        </option>
        <option value="@QuestionType.Checkbox" selected="@(newQuestion.Type == QuestionType.Checkbox)">Multiple Choice
        </option>
    </select>

    @if (newQuestion?.Type == QuestionType.Checkbox)
    {
        <div class="multiple-choice-options">
            @foreach (var option in newQuestion!.Options)
            {
                <div class="input-group mb-2">
                    <input type="text" class="form-control" placeholder="Option" @bind-value="option.Option">
                    <button class="btn btn-outline-danger" type="button" @onclick="@(() => RemoveOption(option))">
                        <i class="oi oi-minus"></i>
                    </button>
                </div>
            }
            <button class="btn btn-primary btn-sm" type="button" @onclick="AddOption">Add Option</button>
        </div>
    }


    <button class="btn btn-danger btn-sm position-absolute top-0 end-0 m-2" type="button"
        @onclick="@(() => RemoveQuestion.InvokeAsync())">
        <i class="oi oi-trash"></i>
    </button>
</div>

@code {

    [Parameter]
    public Question? newQuestion { get; set; }

    [Parameter]
    public EventCallback RemoveQuestion { get; set; }

    private void HandleAnswerTypeChange(ChangeEventArgs e)
    {
        Enum.TryParse(e.Value?.ToString(), out QuestionType selectedType);

        newQuestion!.Type = selectedType;

        if (newQuestion?.Type == QuestionType.Checkbox && newQuestion?.Options.Count == 0) // Initialize with at least 2 options
        {
            AddOption();
            AddOption();
        }

    }

    private void AddOption()
    {
        newQuestion?.Options.Add(new QuestionOption());
    }

    private void RemoveOption(QuestionOption option)
    {
        newQuestion?.Options.Remove(option);
    }
}