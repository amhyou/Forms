@page "/Edit/{templateId:int}"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using forms.Components.Template.Shared
@using Microsoft.AspNetCore.Components.Forms
@using forms.Data;
@using forms.Models;
@inject ApplicationDbContext _db
@inject MinioService MinioService

<!-- Body Content -->
<div class="container mt-4 text-center">
    <div class="d-flex justify-content-center">
        <ul class="nav nav-tabs" id="quizTabs" role="tablist">
            <li class="nav-item @( Tab == 0 ? "active":"")" role="presentation">
                <a @onclick="() => ChangeTab(0)" class="nav-link" data-bs-toggle="tab" href="#" role="tab">Create
                    Quiz</a>
            </li>
            <li class="nav-item @( Tab == 1 ? "active":"")" role="presentation">
                <a @onclick="() => ChangeTab(1)" class="nav-link" data-bs-toggle="tab" href="#" role="tab">Responses</a>
            </li>
            <li class="nav-item @( Tab == 2 ? "active":"")" role="presentation">
                <a @onclick="() => ChangeTab(2)" class="nav-link" data-bs-toggle="tab" href="#" role="tab">Settings</a>
            </li>
        </ul>
    </div>

    <div class="tab-content mt-4">

        @if (Tab == 0)
        {
            <div class="container mt-4">
                <div class="card p-4 mx-auto" style="max-width: 600px;">
                    <h4 class="text-primary">Create a Quiz</h4>
                    
                        <!-- Quiz Title -->
                        <div class="mb-3">
                            <label class="form-label">Quiz Title</label>
                            <input @bind-value="newTemplate.Title" type="text" class="form-control" placeholder="Enter quiz title">
                        </div>

                        <!-- Quiz Description -->
                        <div class="mb-3">
                            <label class="form-label">Quiz Description</label>
                            <textarea @bind="newTemplate.Description" class="form-control" rows="3" placeholder="Enter quiz description"></textarea>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Quiz Image</label>
                            <InputFile OnChange="@HandleImageSelected" accept="image/*" class="form-control" />
                            @if (newTemplate.ImageUrl != null)
                            {
                                <img src="@newTemplate.ImageUrl" alt="Quiz Image" class="img-fluid mt-2" />
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Tags</label>
                            <div class="border rounded p-1 d-flex flex-wrap">
                                @foreach (var tag in newTemplate.Tags)
                                {
                                    <div class="badge bg-primary me-1 mb-1">
                                        @tag.Name
                                        <button type="button" class="btn-close btn-close-white ms-1" aria-label="Close"
                                            @onclick="@(() => newTemplate.Tags.Remove(tag))"></button>
                                    </div>
                                }
                                <InputText @oninput="HandleTagInput" @bind-value="tagInput"
                                    class="form-control border-0 flex-grow-1" placeholder="Enter tags" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Topic</label>
                            <InputSelect @bind-Value="SelectedTopicId" class="form-select">
                                @foreach (var topic in AvailableTopics)
                                {
                                    <option value="@topic.Id">@topic.Name</option>
                                }
                            </InputSelect>
                        </div>

                        <!-- Questions Section -->
                        <div id="questionsContainer">
                            @foreach (var question in newTemplate.Questions)
                            {
                                <QuestionView RemoveQuestion="@(()=>RemoveQuestion(question))" newQuestion="question" />
                            }
                        </div>

                        <!-- Add Question Button -->
                        <button @onclick="AddEmptyQuestion" type="button" class="btn btn-outline-primary w-100"
                            id="addQuestion">Add Question</button>

                        <!-- Save Quiz Button -->
                        <button @onclick="CreateNewTemplate" type="button" class="btn btn-primary w-100 mt-3">Save Quiz</button>
                    
                </div>
            </div>
        }
        <!-- Quiz Creation Component -->
        @if (Tab == 1)
        {
            <div class="container mt-4">
                <p>Content for Tab 3</p>
            </div>
        }
        @if (Tab == 2)
        {
            <!-- Settings Tab -->
            <div class="container mt-4">
                <div class="card p-4 mx-auto" style="max-width: 600px;">
                    <h4 class="text-primary">Quiz Settings</h4>

                    <div class="mb-3">
                        <label class="form-label">Quiz Visibility</label>
                        <div class="form-check form-switch"> @* Use form-switch for a nicer switch *@
                            <InputCheckbox @bind-Value="newTemplate.IsPublic" class="form-check-input" id="isPublicSwitch" />
                            <label class="form-check-label" for="isPublicSwitch">@(newTemplate.IsPublic ? "Public" : "Restricted")</label>
                        </div>
                    </div>

                    @if (!newTemplate.IsPublic)
                    {
                        <div class="mb-3">
                            <label class="form-label">Allowed Users</label>
                            <InputText @oninput="HandleUserInput" @bind-Value="userInput" class="form-control"
                                placeholder="Enter username" />

                            @if (Suggestions.Any()) // Show suggestions if available
                            {
                                <ul class="list-group mt-2">
                                    @foreach (var suggestion in Suggestions)
                                    {
                                        <li class="list-group-item list-group-item-action" @onclick="@(() => AddUser(suggestion))">
                                            @suggestion
                                        </li>
                                    }
                                </ul>
                            }

                            @if (newTemplate.AllowedUsers.Any()) // Display added users as a list
                            {
                                <ul class="list-group mt-2">
                                    @foreach (var user in newTemplate.AllowedUsers)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            @user
                                            <button type="button" class="btn-close btn-close-white"
                                                @onclick="@(() => RemoveUser(user))"></button>
                                        </li>
                                    }
                                </ul>
                            }

                        </div>
                    }

                    <button type="button" class="btn btn-primary w-100" @onclick="SaveSettings">Save Settings</button>
                </div>
            </div>
        }

    </div>
</div>


@code {
    [Parameter] public int templateId { get; set; }

    private int Tab = 0;

    public Template newTemplate = new();

    private void ChangeTab(int nextTab)
    {
        Tab = nextTab;
    }

    private List<ApplicationUser> Suggestions = new();
    private List<ApplicationUser> AllUsers = new();

    private string userInput = "";
    private void RemoveUser(ApplicationUser userToRemove)
    {
        newTemplate.AllowedUsers.Remove(userToRemove);
    }

    private void HandleUserInput(ChangeEventArgs e)
    {
        string? inputValue = e.Value?.ToString();
        userInput = inputValue ?? "";

        if (!string.IsNullOrWhiteSpace(inputValue))
        {
            Suggestions = AllUsers.Where(u => u.UserName!.Contains(inputValue, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            Suggestions.Clear();
        }
    }

    private void AddUser(ApplicationUser user)
    {
        if (!newTemplate.AllowedUsers.Contains(user))
        {
            newTemplate.AllowedUsers.Add(user);
            userInput = ""; // Clear input field
            Suggestions.Clear(); // Clear suggestions
        }
    }

    private List<Topic> AvailableTopics = new();
    private int SelectedTopicId;

    protected override async Task OnInitializedAsync()
    {
        newTemplate = await _db.Templates.Include(t=>t.Topic).Include(t=>t.Tags).Include(t=>t.Questions).ThenInclude(q=>q.Options).FirstOrDefaultAsync(t=>t.Id == templateId);
        AvailableTopics = await _db.Topics.ToListAsync();
        AllUsers = await _db.Users.ToListAsync();
        await base.OnInitializedAsync();
    }

    private void AddEmptyQuestion()
    {
        newTemplate.Questions.Add(new Question
        {
            Order = newTemplate.Questions.Count,
            Text = $"Question {newTemplate.Questions.Count + 1}",
            Type = QuestionType.ShortAnswer,

        });
    }
    private void RemoveQuestion(Question question)
    {
        newTemplate.Questions.Remove(question);
        for (var i = 0; i < newTemplate.Questions.Count; i++)
        {
            newTemplate.Questions[i].Order = i;
        }
        StateHasChanged();
    }

    private IBrowserFile? _file;

    private void HandleImageSelected(InputFileChangeEventArgs e)
    {
        _file = e.File;
    }
    private async Task<string> HandleImageUpload()
    {
        if (_file == null) return "";
        try
        {
            using var stream = _file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
            return await MinioService.UploadImageAsync(stream, _file.Name, _file.ContentType);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
            return "";
        }
    }

    private string tagInput { get; set; } = string.Empty;
    private void HandleTagInput(ChangeEventArgs e)
    {
        string inputValue = e.Value!.ToString()!;
        if (!string.IsNullOrWhiteSpace(inputValue) && inputValue.EndsWith(" "))
        {
            string tag = inputValue.Trim();
            if (!newTemplate.Tags.Select(t=>t.Name).Contains(tag))
            {
                newTemplate.Tags.Add(new Tag{ Name = tag });
                tagInput = string.Empty;
                StateHasChanged();
            }
        }
    }

    private void SaveSettings()
    {
        Console.WriteLine($"Public: {newTemplate.IsPublic}");
    }

    private async Task CreateNewTemplate(){
       if(string.IsNullOrWhiteSpace(newTemplate.Title) || string.IsNullOrWhiteSpace(newTemplate.Description) || newTemplate.Questions.Count == 0){
            Console.WriteLine("correct errors first");
            return;
       }
       newTemplate.ImageUrl = await HandleImageUpload();
       newTemplate.TopicId = SelectedTopicId;
       newTemplate.CreatorId = "016cc48d-e295-49b1-a8f1-9c7b2508d7e1";
       _db.Templates.Add(newTemplate);
       await _db.SaveChangesAsync();
    }
}